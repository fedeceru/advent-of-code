const { input } = require('./input');

let S;
let E;
for (let y = 0; y < input.length; y++) {
	for (let x = 0; x < input[y].length; x++) {
		const cell = input[y][x];
		if (cell === 'S') {
			S = { x, y };

			// Your current position (`S`) has elevation `a`
			input[y][x] = 'a';
		} else if (cell === 'E') {
			E = { x, y };

			// And the location that should get the best signal (`E`) has elevation `z`
			input[y][x] = 'z';
		}

		// While we are looping, re-encode chars to ints, to make our elevation comparisons easier
		input[y][x] =
			input[y][x].charCodeAt(0) -
			'a'.charCodeAt(0) +
			(cell === 'S' ? -1 : cell === 'E' ? 1 : 0) +
			1;
	}
}

const toId = (x, y) => `${x},${y}`;

function getNeighbors(x, y) {
	return [
		{ x: x, y: y - 1 },
		{ x: x - 1, y: y },
		{ x: x + 1, y: y },
		{ x: x, y: y + 1 },
	].filter((coord) => typeof input[coord.y]?.[coord.x] !== 'undefined');
}

function buildFrontier(from_x, from_y) {
	const frontier = [];
	frontier.push({ x: from_x, y: from_y });

	const came_from = new Map();
	came_from.set(toId(from_x, from_y), null);
	while (frontier.length > 0) {
		const current = frontier.shift();
		const current_val = input[current.y][current.x];

		let neighbors = getNeighbors(current.x, current.y);
		for (let next of neighbors) {
			const next_cell = input[next.y][next.x];
			const next_id = toId(next.x, next.y);

			if (next_cell - current_val > 1 || came_from.has(next_id)) {
				continue;
			}

			// Coord is walkable
			const current_id = toId(current.x, current.y);
			frontier.push(next);
			came_from.set(next_id, current_id);
		}
	}

	return came_from;
}

function getShortestPath(from_x, from_y, to_x, to_y) {
	const from_id = toId(from_x, from_y);
	const to_id = toId(to_x, to_y);
	const came_from = buildFrontier(from_x, from_y);
	let current = to_id;

	let path = [];
	while (current !== undefined && current !== from_id) {
		path.push(current);
		current = came_from.get(current);
	}

	// An undefined `current` means it wasn't possible to have a path `from` -> `to`, return an empty path
	if (current === undefined) {
		return [];
	}

	// Finally, put `from` first, and `to` last
	path.reverse();

	// Note our path won't include the `from` position
	return path;
}

const path = getShortestPath(S.x, S.y, E.x, E.y);
console.log(path.length);

// console.log(JSON.stringify(path, null, '  '));
/*
[
  "0,20",
  "0,21",
  "0,22",
  "0,23",
  "0,24",
  "0,25",
  "0,26",
  "0,27",
  "1,27",
  "2,27",
  "2,26",
  "2,25",
  "2,24",
  "3,24",
  "4,24",
  "4,23",
  "4,22",
  "3,22",
  "2,22",
  "2,21",
  "2,20",
  "3,20",
  "4,20",
  "5,20",
  "5,21",
  "6,21",
  "7,21",
  "7,22",
  "8,22",
  "9,22",
  "10,22",
  "11,22",
  "11,23",
  "11,24",
  "11,25",
  "11,26",
  "11,27",
  "11,28",
  "11,29",
  "12,29",
  "13,29",
  "14,29",
  "15,29",
  "15,30",
  "15,31",
  "15,32",
  "15,33",
  "15,34",
  "15,35",
  "15,36",
  "15,37",
  "16,37",
  "17,37",
  "18,37",
  "19,37",
  "20,37",
  "20,38",
  "21,38",
  "22,38",
  "23,38",
  "23,37",
  "23,36",
  "22,36",
  "21,36",
  "21,35",
  "20,35",
  "19,35",
  "18,35",
  "17,35",
  "17,34",
  "17,33",
  "18,33",
  "19,33",
  "19,32",
  "19,31",
  "18,31",
  "17,31",
  "17,30",
  "17,29",
  "18,29",
  "19,29",
  "19,28",
  "20,28",
  "21,28",
  "22,28",
  "23,28",
  "23,27",
  "24,27",
  "25,27",
  "26,27",
  "26,28",
  "26,29",
  "26,30",
  "27,30",
  "28,30",
  "28,31",
  "28,32",
  "28,33",
  "28,34",
  "29,34",
  "30,34",
  "30,33",
  "30,32",
  "31,32",
  "31,31",
  "32,31",
  "33,31",
  "34,31",
  "34,32",
  "35,32",
  "35,33",
  "35,34",
  "35,35",
  "35,36",
  "35,37",
  "35,38",
  "35,39",
  "35,40",
  "36,40",
  "37,40",
  "38,40",
  "39,40",
  "40,40",
  "41,40",
  "42,40",
  "43,40",
  "44,40",
  "45,40",
  "46,40",
  "47,40",
  "48,40",
  "49,40",
  "50,40",
  "51,40",
  "52,40",
  "53,40",
  "54,40",
  "55,40",
  "56,40",
  "57,40",
  "58,40",
  "59,40",
  "60,40",
  "61,40",
  "62,40",
  "63,40",
  "64,40",
  "65,40",
  "66,40",
  "67,40",
  "68,40",
  "69,40",
  "70,40",
  "70,39",
  "70,38",
  "71,38",
  "72,38",
  "73,38",
  "73,37",
  "73,36",
  "74,36",
  "74,35",
  "75,35",
  "76,35",
  "76,34",
  "76,33",
  "75,33",
  "74,33",
  "73,33",
  "72,33",
  "72,32",
  "72,31",
  "73,31",
  "74,31",
  "75,31",
  "76,31",
  "76,30",
  "76,29",
  "75,29",
  "74,29",
  "73,29",
  "73,28",
  "72,28",
  "71,28",
  "71,27",
  "71,26",
  "72,26",
  "73,26",
  "74,26",
  "74,27",
  "75,27",
  "76,27",
  "76,26",
  "76,25",
  "75,25",
  "75,24",
  "74,24",
  "73,24",
  "72,24",
  "71,24",
  "71,23",
  "71,22",
  "72,22",
  "73,22",
  "74,22",
  "75,22",
  "76,22",
  "76,21",
  "76,20",
  "75,20",
  "74,20",
  "73,20",
  "72,20",
  "72,19",
  "72,18",
  "73,18",
  "74,18",
  "75,18",
  "76,18",
  "76,17",
  "76,16",
  "75,16",
  "74,16",
  "73,16",
  "72,16",
  "72,17",
  "71,17",
  "71,18",
  "71,19",
  "71,20",
  "70,20",
  "70,21",
  "70,22",
  "70,23",
  "70,24",
  "70,25",
  "70,26",
  "70,27",
  "70,28",
  "69,28",
  "69,29",
  "69,30",
  "69,31",
  "68,31",
  "68,32",
  "67,32",
  "67,33",
  "66,33",
  "66,34",
  "65,34",
  "64,34",
  "63,34",
  "62,34",
  "61,34",
  "60,34",
  "59,34",
  "58,34",
  "57,34",
  "56,34",
  "55,34",
  "55,35",
  "54,35",
  "53,35",
  "52,35",
  "52,36",
  "51,36",
  "50,36",
  "49,36",
  "49,35",
  "48,35",
  "47,35",
  "47,34",
  "46,34",
  "46,33",
  "46,32",
  "45,32",
  "45,31",
  "45,30",
  "46,30",
  "46,29",
  "46,28",
  "45,28",
  "44,28",
  "44,27",
  "44,26",
  "43,26",
  "43,25",
  "43,24",
  "42,24",
  "42,23",
  "41,23",
  "41,22",
  "41,21",
  "42,21",
  "42,20",
  "42,19",
  "41,19",
  "40,19",
  "40,18",
  "40,17",
  "41,17",
  "42,17",
  "42,16",
  "43,16",
  "43,15",
  "44,15",
  "44,14",
  "45,14",
  "46,14",
  "47,14",
  "47,13",
  "48,13",
  "48,12",
  "49,12",
  "49,11",
  "49,10",
  "50,10",
  "50,9",
  "51,9",
  "51,8",
  "52,8",
  "52,7",
  "53,7",
  "54,7",
  "55,7",
  "56,7",
  "56,8",
  "57,8",
  "58,8",
  "58,9",
  "59,9",
  "59,10",
  "59,11",
  "60,11",
  "60,12",
  "61,12",
  "62,12",
  "63,12",
  "64,12",
  "65,12",
  "65,13",
  "66,13",
  "66,14",
  "67,14",
  "67,15",
  "67,16",
  "67,17",
  "67,18",
  "67,19",
  "67,20",
  "67,21",
  "67,22",
  "67,23",
  "67,24",
  "67,25",
  "67,26",
  "67,27",
  "67,28",
  "67,29",
  "66,29",
  "66,30",
  "65,30",
  "65,31",
  "64,31",
  "63,31",
  "63,32",
  "62,32",
  "61,32",
  "61,31",
  "60,31",
  "59,31",
  "58,31",
  "57,31",
  "56,31",
  "55,31",
  "55,32",
  "54,32",
  "53,32",
  "53,33",
  "52,33",
  "51,33",
  "50,33",
  "50,32",
  "49,32",
  "49,31",
  "48,31",
  "48,30",
  "47,30",
  "47,29",
  "47,28",
  "48,28",
  "48,27",
  "48,26",
  "47,26",
  "47,25",
  "46,25",
  "46,24",
  "45,24",
  "45,23",
  "45,22",
  "44,22",
  "44,21",
  "43,21",
  "43,20",
  "43,19",
  "44,19",
  "45,19",
  "45,18",
  "45,17",
  "46,17",
  "46,16",
  "47,16",
  "48,16",
  "48,15",
  "49,15",
  "50,15",
  "50,14",
  "51,14",
  "51,13",
  "51,12",
  "51,11",
  "52,11",
  "53,11",
  "53,10",
  "54,10",
  "55,10",
  "55,11",
  "56,11",
  "57,11",
  "57,12",
  "58,12",
  "58,13",
  "58,14",
  "59,14",
  "60,14",
  "61,14",
  "62,14",
  "63,14",
  "63,15",
  "64,15",
  "64,16",
  "64,17",
  "64,18",
  "64,19",
  "64,20",
  "64,21",
  "64,22",
  "64,23",
  "64,24",
  "64,25",
  "64,26",
  "64,27",
  "64,28",
  "63,28",
  "63,29",
  "62,29",
  "61,29",
  "60,29",
  "59,29",
  "59,28",
  "58,28",
  "57,28",
  "56,28",
  "55,28",
  "55,29",
  "54,29",
  "53,29",
  "53,30",
  "52,30",
  "51,30",
  "51,29",
  "50,29",
  "50,28",
  "49,28",
  "49,27",
  "49,26",
  "50,26",
  "50,25",
  "50,24",
  "49,24",
  "49,23",
  "48,23",
  "48,22",
  "47,22",
  "47,21",
  "46,21",
  "46,20",
  "46,19",
  "47,19",
  "48,19",
  "48,18",
  "49,18",
  "49,17",
  "50,17",
  "51,17",
  "52,17",
  "52,16",
  "52,15",
  "53,15",
  "53,14",
  "53,13",
  "54,13",
  "55,13",
  "55,14",
  "56,14",
  "56,15",
  "57,15",
  "57,16",
  "58,16",
  "59,16",
  "60,16",
  "61,16",
  "61,17",
  "62,17",
  "62,18",
  "62,19",
  "62,20",
  "61,20",
  "61,21",
  "61,22",
  "61,23",
  "61,24",
  "61,25",
  "61,26",
  "60,26",
  "59,26",
  "58,26",
  "57,26",
  "56,26",
  "55,26",
  "54,26",
  "54,27",
  "53,27",
  "52,27",
  "52,26",
  "52,25",
  "52,24",
  "52,23",
  "53,23",
  "54,23",
  "55,23",
  "55,22",
  "56,22",
  "57,22",
  "58,22",
  "58,21",
  "58,20",
  "59,20",
  "60,20",
  "60,19",
  "60,18",
  "59,18",
  "58,18",
  "57,18",
  "57,19",
  "56,19",
  "56,20",
  "55,20",
  "54,20",
  "53,20",
  "52,20"
]
*/
